{"ast":null,"code":"import { SET_CHIRPS, LOADING_DATA, LIKE_CHIRP, UNLIKE_CHIRP, DELETE_CHIRP, SET_ERRORS, POST_CHIRP, CLEAR_ERRORS, LOADING_UI, SET_CHIRP, STOP_LOADING_UI, SUBMIT_COMMENT } from '../types';\nimport axios from 'axios'; // Get all chirps\n\nexport const getChirps = () => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get('/chirps').then(res => {\n    dispatch({\n      type: SET_CHIRPS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: SET_CHIRPS,\n      payload: []\n    });\n  });\n};\nexport const getChirp = chirpId => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.get(\"/chirp/\".concat(chirpId)).then(res => {\n    dispatch({\n      type: SET_CHIRP,\n      payload: res.data\n    });\n    dispatch({\n      type: STOP_LOADING_UI\n    });\n  }).catch(err => console.log(err));\n}; // Post a chirp\n\nexport const postChirp = newChirp => dispatch => {\n  dispatch({\n    type: LOADING_UI\n  });\n  axios.post('/chirp', newChirp).then(res => {\n    dispatch({\n      type: POST_CHIRP,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Like a chirp\n\nexport const likeChirp = chirpId => dispatch => {\n  axios.get(\"/chirp/\".concat(chirpId, \"/like\")).then(res => {\n    dispatch({\n      type: LIKE_CHIRP,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Unlike a chirp\n\nexport const unlikeChirp = chirpId => dispatch => {\n  axios.get(\"/chirp/\".concat(chirpId, \"/unlike\")).then(res => {\n    dispatch({\n      type: UNLIKE_CHIRP,\n      payload: res.data\n    });\n  }).catch(err => console.log(err));\n}; // Submit a comment\n\nexport const submitComment = (chirpId, commentData) => dispatch => {\n  axios.post(\"/chirp/\".concat(chirpId, \"/comment\"), commentData).then(res => {\n    dispatch({\n      type: SUBMIT_COMMENT,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n  }).catch(err => {\n    dispatch({\n      type: SET_ERRORS,\n      payload: err.response.data\n    });\n  });\n};\nexport const deleteChirp = chirpId => dispatch => {\n  axios.delete(\"/chirp/\".concat(chirpId)).then(() => {\n    dispatch({\n      type: DELETE_CHIRP,\n      payload: chirpId\n    });\n  }).catch(err => console.log(err));\n}; //   get user data\n\nexport const getUserData = userHandle => dispatch => {\n  dispatch({\n    type: LOADING_DATA\n  });\n  axios.get(\"/user/\".concat(userHandle)).then(res => {\n    dispatch({\n      type: SET_CHIRPS,\n      payload: res.data.chirps\n    });\n  }).catch(() => {\n    dispatch({\n      type: SET_CHIRPS,\n      payload: null\n    });\n  });\n};\nexport const clearErrors = () => dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["/Users/flatironloanerstudent/Desktop/birdbox-client/src/redux/actions/dataActions.js"],"names":["SET_CHIRPS","LOADING_DATA","LIKE_CHIRP","UNLIKE_CHIRP","DELETE_CHIRP","SET_ERRORS","POST_CHIRP","CLEAR_ERRORS","LOADING_UI","SET_CHIRP","STOP_LOADING_UI","SUBMIT_COMMENT","axios","getChirps","dispatch","type","get","then","res","payload","data","catch","err","getChirp","chirpId","console","log","postChirp","newChirp","post","clearErrors","response","likeChirp","unlikeChirp","submitComment","commentData","deleteChirp","delete","getUserData","userHandle","chirps"],"mappings":"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","sourcesContent":["import {\n    SET_CHIRPS,\n    LOADING_DATA,\n    LIKE_CHIRP,\n    UNLIKE_CHIRP,\n    DELETE_CHIRP,\n    SET_ERRORS,\n    POST_CHIRP,\n    CLEAR_ERRORS,\n    LOADING_UI,\n    SET_CHIRP,\n    STOP_LOADING_UI,\n    SUBMIT_COMMENT\n  } from '../types';\n  import axios from 'axios';\n  \n  // Get all chirps\n  export const getChirps = () => (dispatch) => {\n    dispatch({ type: LOADING_DATA });\n    axios\n      .get('/chirps')\n      .then((res) => {\n        dispatch({\n          type: SET_CHIRPS,\n          payload: res.data\n        });\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_CHIRPS,\n          payload: []\n        });\n      });\n  };\n  export const getChirp = (chirpId) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .get(`/chirp/${chirpId}`)\n      .then((res) => {\n        dispatch({\n          type: SET_CHIRP,\n          payload: res.data\n        });\n        dispatch({ type: STOP_LOADING_UI });\n      })\n      .catch((err) => console.log(err));\n  };\n  // Post a chirp\n  export const postChirp = (newChirp) => (dispatch) => {\n    dispatch({ type: LOADING_UI });\n    axios\n      .post('/chirp', newChirp)\n      .then((res) => {\n        dispatch({\n          type: POST_CHIRP,\n          payload: res.data\n        });\n        dispatch(clearErrors());\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  };\n  // Like a chirp\n  export const likeChirp = (chirpId) => (dispatch) => {\n    axios\n      .get(`/chirp/${chirpId}/like`)\n      .then((res) => {\n        dispatch({\n          type: LIKE_CHIRP,\n          payload: res.data\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  // Unlike a chirp\n  export const unlikeChirp = (chirpId) => (dispatch) => {\n    axios\n      .get(`/chirp/${chirpId}/unlike`)\n      .then((res) => {\n        dispatch({\n          type: UNLIKE_CHIRP,\n          payload: res.data\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n  // Submit a comment\n  export const submitComment = ( chirpId, commentData) => (dispatch) => {\n    axios\n      .post(`/chirp/${chirpId}/comment`, commentData)\n      .then((res) => {\n        dispatch({\n          type: SUBMIT_COMMENT,\n          payload: res.data\n        });\n        dispatch(clearErrors());\n      })\n      .catch((err) => {\n        dispatch({\n          type: SET_ERRORS,\n          payload: err.response.data\n        });\n      });\n  };\n  export const deleteChirp = (chirpId) => (dispatch) => {\n    axios\n      .delete(`/chirp/${chirpId}`)\n      .then(() => {\n        dispatch({ type: DELETE_CHIRP, payload: chirpId });\n      })\n      .catch((err) => console.log(err));\n  };\n//   get user data\n  export const getUserData = (userHandle) => (dispatch) => {\n    dispatch({ type: LOADING_DATA });\n    axios\n      .get(`/user/${userHandle}`)\n      .then((res) => {\n        dispatch({\n          type: SET_CHIRPS,\n          payload: res.data.chirps\n        });\n      })\n      .catch(() => {\n        dispatch({\n          type: SET_CHIRPS,\n          payload: null\n        });\n      });\n  };\n  \n  export const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n  };"]},"metadata":{},"sourceType":"module"}