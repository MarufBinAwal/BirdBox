{"ast":null,"code":"import _defineProperty from \"/Users/flatironloanerstudent/Desktop/birdbox-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_CHIRPS, LIKE_CHIRP, UNLIKE_CHIRP, LOADING_DATA, DELETE_CHIRP, POST_CHIRP, SET_CHIRP, SUBMIT_COMMENT } from '../types';\nconst initialState = {\n  chirps: [],\n  chirp: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case SET_CHIRPS:\n      return _objectSpread({}, state, {\n        chirps: action.payload,\n        loading: false\n      });\n\n    case SET_CHIRP:\n      return _objectSpread({}, state, {\n        chirp: action.payload\n      });\n\n    case LIKE_CHIRP:\n    case UNLIKE_CHIRP:\n      let index = state.chirps.findIndex(chirp => chirp.chirpId === action.payload.chirpId);\n      state.chirps[index] = action.payload;\n\n      if (state.chirp.chirpId === action.payload.chirpId) {\n        state.chirp = action.payload;\n      }\n\n      return _objectSpread({}, state);\n\n    case DELETE_CHIRP:\n      index = state.chirps.findIndex(chirp => chirp.chirpId === action.payload);\n      state.chirps.splice(index, 1);\n      return _objectSpread({}, state);\n\n    case POST_CHIRP:\n      return _objectSpread({}, state, {\n        chirps: [action.payload, ...state.chirps]\n      });\n\n    case SUBMIT_COMMENT:\n      return _objectSpread({}, state, {\n        chirp: _objectSpread({}, state.chirp, {\n          comments: [action.payload, ...state.chirp.comments]\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/flatironloanerstudent/Desktop/birdbox-client/src/redux/reducers/dataReducer.js"],"names":["SET_CHIRPS","LIKE_CHIRP","UNLIKE_CHIRP","LOADING_DATA","DELETE_CHIRP","POST_CHIRP","SET_CHIRP","SUBMIT_COMMENT","initialState","chirps","chirp","loading","state","action","type","payload","index","findIndex","chirpId","splice","comments"],"mappings":";;;;;;AAAA,SACIA,UADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,YAJJ,EAKIC,YALJ,EAMIC,UANJ,EAOIC,SAPJ,EAQIC,cARJ,QASS,UATT;AAWE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACE,+BACKS,KADL;AAEED,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKX,UAAL;AACE,+BACKY,KADL;AAEEH,QAAAA,MAAM,EAAEI,MAAM,CAACE,OAFjB;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,SAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFhB;;AAIF,SAAKd,UAAL;AACA,SAAKC,YAAL;AACE,UAAIc,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CACTP,KAAD,IAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAAP,CAAeG,OADlC,CAAZ;AAGAN,MAAAA,KAAK,CAACH,MAAN,CAAaO,KAAb,IAAsBH,MAAM,CAACE,OAA7B;;AACA,UAAIH,KAAK,CAACF,KAAN,CAAYQ,OAAZ,KAAwBL,MAAM,CAACE,OAAP,CAAeG,OAA3C,EAAoD;AAClDN,QAAAA,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE,OAArB;AACD;;AACD,+BACKH,KADL;;AAGF,SAAKR,YAAL;AACEY,MAAAA,KAAK,GAAGJ,KAAK,CAACH,MAAN,CAAaQ,SAAb,CACLP,KAAD,IAAWA,KAAK,CAACQ,OAAN,KAAkBL,MAAM,CAACE,OAD9B,CAAR;AAGAH,MAAAA,KAAK,CAACH,MAAN,CAAaU,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;AACA,+BACKJ,KADL;;AAGF,SAAKP,UAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,MAAM,EAAE,CAACI,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACH,MAA1B;AAFV;;AAIF,SAAKF,cAAL;AACE,+BACKK,KADL;AAEEF,QAAAA,KAAK,oBACAE,KAAK,CAACF,KADN;AAEHU,UAAAA,QAAQ,EAAE,CAACP,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACF,KAAN,CAAYU,QAAhC;AAFP;AAFP;;AAOF;AACE,aAAOR,KAAP;AAnDJ;AAqDD","sourcesContent":["import {\n    SET_CHIRPS,\n    LIKE_CHIRP,\n    UNLIKE_CHIRP,\n    LOADING_DATA,\n    DELETE_CHIRP,\n    POST_CHIRP,\n    SET_CHIRP,\n    SUBMIT_COMMENT\n  } from '../types';\n  \n  const initialState = {\n    chirps: [],\n    chirp: {},\n    loading: false\n  };\n  \n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case LOADING_DATA:\n        return {\n          ...state,\n          loading: true\n        };\n      case SET_CHIRPS:\n        return {\n          ...state,\n          chirps: action.payload,\n          loading: false\n        };\n      case SET_CHIRP:\n        return {\n          ...state,\n          chirp: action.payload\n        };\n      case LIKE_CHIRP:\n      case UNLIKE_CHIRP:\n        let index = state.chirps.findIndex(\n          (chirp) => chirp.chirpId === action.payload.chirpId\n        );\n        state.chirps[index] = action.payload;\n        if (state.chirp.chirpId === action.payload.chirpId) {\n          state.chirp = action.payload;\n        }\n        return {\n          ...state\n        };\n      case DELETE_CHIRP:\n        index = state.chirps.findIndex(\n          (chirp) => chirp.chirpId === action.payload\n        );\n        state.chirps.splice(index, 1);\n        return {\n          ...state\n        };\n      case POST_CHIRP:\n        return {\n          ...state,\n          chirps: [action.payload, ...state.chirps]\n        };\n      case SUBMIT_COMMENT:\n        return {\n          ...state,\n          chirp: {\n            ...state.chirp,\n            comments: [action.payload, ...state.chirp.comments]\n          }\n        };\n      default:\n        return state;\n    }\n  }"]},"metadata":{},"sourceType":"module"}