{"ast":null,"code":"var _jsxFileName = \"/Users/flatironloanerstudent/Desktop/birdbox-client/src/pages/user.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Chirp from '../components/chirp/Chirp';\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\nimport ChirpSkeleton from '../util/ChirpSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      profile: null,\n      chirpIdParam: null\n    };\n  }\n\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const chirpId = this.props.match.params.chirpId;\n    if (chirpId) this.setState({\n      chirpIdParam: chirpId\n    });\n    this.props.getUserData(handle);\n    axios.get(\"/user/\".concat(handle)).then(res => {\n      this.setState({\n        profile: res.data.user\n      });\n    }).catch(err => console.log(err));\n  }\n\n  render() {\n    const _this$props$data = this.props.data,\n          chirps = _this$props$data.chirps,\n          loading = _this$props$data.loading;\n    const chirpIdParam = this.state.chirpIdParam;\n    const chirpsMarkup = loading ? React.createElement(ChirpSkeleton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }) : chirps === null ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"No chirps from this user\") : !chirpIdParam ? chirps.map(chirp => React.createElement(Chirp, {\n      key: chirp.chirpId,\n      chirp: chirp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })) : chirps.map(chirp => {\n      if (chirp.chirpId !== chirpIdParam) return React.createElement(Chirp, {\n        key: chirp.chirpId,\n        chirp: chirp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });else return React.createElement(Chirp, {\n        key: chirp.chirpId,\n        chirp: chirp,\n        openDialog: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    });\n    return React.createElement(Grid, {\n      container: true,\n      spacing: 112,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      sm: 8,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, chirpsMarkup), React.createElement(Grid, {\n      item: true,\n      sm: 4,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.state.profile === null ? React.createElement(ProfileSkeleton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }) : React.createElement(StaticProfile, {\n      profile: this.state.profile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  }\n\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getUserData\n})(user);","map":{"version":3,"sources":["/Users/flatironloanerstudent/Desktop/birdbox-client/src/pages/user.js"],"names":["React","Component","PropTypes","axios","Chirp","StaticProfile","Grid","ChirpSkeleton","ProfileSkeleton","connect","getUserData","user","state","profile","chirpIdParam","componentDidMount","handle","props","match","params","chirpId","setState","get","then","res","data","catch","err","console","log","render","chirps","loading","chirpsMarkup","map","chirp","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport Chirp from '../components/chirp/Chirp';\nimport StaticProfile from '../components/profile/StaticProfile';\nimport Grid from '@material-ui/core/Grid';\n\nimport ChirpSkeleton from '../util/ChirpSkeleton';\nimport ProfileSkeleton from '../util/ProfileSkeleton';\n\nimport { connect } from 'react-redux';\nimport { getUserData } from '../redux/actions/dataActions';\n\nclass user extends Component {\n  state = {\n    profile: null,\n    chirpIdParam: null\n  };\n  componentDidMount() {\n    const handle = this.props.match.params.handle;\n    const chirpId = this.props.match.params.chirpId;\n\n    if (chirpId) this.setState({ chirpIdParam: chirpId });\n\n    this.props.getUserData(handle);\n    axios\n      .get(`/user/${handle}`)\n      .then((res) => {\n        this.setState({\n          profile: res.data.user\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n  render() {\n    const { chirps, loading } = this.props.data;\n    const { chirpIdParam } = this.state;\n\n    const chirpsMarkup = loading ? (\n      <ChirpSkeleton />\n    ) : chirps === null ? (\n      <p>No chirps from this user</p>\n    ) : !chirpIdParam ? (\n      chirps.map((chirp) => <Chirp key={chirp.chirpId} chirp={chirp} />)\n    ) : (\n      chirps.map((chirp) => {\n        if (chirp.chirpId !== chirpIdParam)\n          return <Chirp key={chirp.chirpId} chirp={chirp} />;\n        else return <Chirp key={chirp.chirpId} chirp={chirp} openDialog />;\n      })\n    );\n\n    return (\n      <Grid container spacing={112}>\n        <Grid item sm={8} xs={12}>\n          {chirpsMarkup}\n        </Grid>\n        <Grid item sm={4} xs={12}>\n          {this.state.profile === null ? (\n            <ProfileSkeleton />\n          ) : (\n            <StaticProfile profile={this.state.profile} />\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nuser.propTypes = {\n  getUserData: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  data: state.data\n});\n\nexport default connect(\n  mapStateToProps,\n  { getUserData }\n)(user);"]},"metadata":{},"sourceType":"module"}